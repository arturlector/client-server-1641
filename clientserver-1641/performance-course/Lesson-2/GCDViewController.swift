//
//  GCDViewController.swift
//  clientserver-1641
//
//  Created by Artur Igberdin on 25.11.2021.
//

import UIKit

class GCDViewController: UIViewController {

    override func viewDidLoad() {
        super.viewDidLoad()

        
        //globalAsyncSycncQosQueue()
        
        //mainQueueIsSerial()
        
        //globalQueueConcurrent()
        
        //customSerialQueue()
        
        //customConcurrentQueue()
        
        //dispatchGroupRequest(completion: () -> ())
    }
    
    func dispatchGroupRequest(completion:()->()) {
        
        let requestGroup = DispatchGroup()
        
        DispatchQueue.global().async(group: requestGroup) {
            //–ü–∞—Ä—Å–∏–º items
        }
        
        DispatchQueue.global().async(group: requestGroup) {
            //–ü–∞—Ä—Å–∏–º profiles
        }
        
        DispatchQueue.global().async(group: requestGroup) {
            //–ü–∞—Ä—Å–∏–º groups
        }
        
        requestGroup.notify(queue: DispatchQueue.main) {
            // –£–∂–µ –µ—Å—Ç—å items, profiles, groups
            // –ó–∞—Ä–∞–Ω–µ–µ —Å–æ–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å
            // completion([])
        }
    }
    
    func customConcurrentQueue() {
        
        let myQueue = DispatchQueue(label: "myQueue", attributes: .concurrent)
        myQueue.async {
            print(Thread.current)
            for _ in (0..<100) {
                print("üòà")
            }
        }
        
        myQueue.async {
            print(Thread.current)
            for _ in (0..<100) {
                print("ü§°")
            }
        }
    }
    
    //–ò–º–µ–Ω–æ–≤–∞–Ω–Ω–∞—è –æ—á–µ—Ä–µ–¥—å - –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    func customSerialQueue() {
        
        let myQueue = DispatchQueue(label: "myQueue")
        myQueue.async {
            print(Thread.current)
            for _ in (0..<100) {
                print("üòà")
            }
        }
        
        myQueue.async {
            print(Thread.current)
            for _ in (0..<100) {
                print("ü§°")
            }
        }
    }
    
    func mainQueueIsSerial() {
        
        //–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å - 1 main thread - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        DispatchQueue.main.async { print("H"); print(Thread.current)}
        DispatchQueue.main.async { print("e"); print(Thread.current)}
        DispatchQueue.main.async { print("l"); print(Thread.current)}
        DispatchQueue.main.async { print("l"); print(Thread.current)}
        DispatchQueue.main.async { print("o"); print(Thread.current)}
    }
    
    func globalQueueConcurrent() {
        
        //–ó–∞–¥–∞—á–∞ —Å—Ç–∞–≤–∏—Ç—å—Å—è –≤ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å
        DispatchQueue.global(qos: .userInteractive).async { print("H"); print(Thread.current) }
        DispatchQueue.global(qos: .userInitiated).async {sleep(1); print("e"); print(Thread.current) }
        
        
        DispatchQueue.global(qos: .utility).async {sleep(1); print("l"); print(Thread.current) }
        DispatchQueue.global(qos: .default).async { print("l"); print(Thread.current) }
        
        sleep(100)
        
        DispatchQueue.global(qos: .background).async { print("o"); print(Thread.current) }
    }
    
    func globalAsyncSycncQosQueue() {
        
        //1 –ø–æ—Ç–æ–∫
        
        //–°—Ç–∞—Ä—Ç—É–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–µ–µ
        DispatchQueue.main.async {
            for _ in (0..<1000) {
                print(Thread.current)
                print("üéÉ")
            }
        }
        
        DispatchQueue.global(qos: .userInteractive).async {
            for _ in (0..<1000) {
                print(Thread.current)
                print("üòá")
            }
        }

        DispatchQueue.global().async {
            for _ in (0..<1000) {
                print(Thread.current)
                print("ü§ñ")
            }
        }

        DispatchQueue.global(qos: .userInteractive).async {
            for _ in (0..<1000) {
                print(Thread.current)
                print("üíÄ")
            }
        }
        
        //–ü–∞—Ä–∞–ª–ª–µ–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –∏ —Å—Ç–∞–≤–∏–º –∑–∞–¥–∞—á–∏ –Ω–∞ —Ä–∞–∑–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
        DispatchQueue.global(qos: .background).sync {
            for _ in (0..<1000) {
                print(Thread.current)
                print("üòà")
            }
        }
        
       
        
        
    }


}
